package com.mystudy.net_multi2;

import java.io.IOException;
import java.net.InetAddress;
import java.net.ServerSocket;
import java.net.Socket;

//== 멀티채팅 서버측 기능 ===
// 읽기전용 쓰레드 : 클라이언트로 부터 받은 메시지를 읽고, 접속자 전체에게 메시지 전송
//----------------
// 다중 접속 가능하게 처리
// 접속자가 보낸 메시지를 읽을 수 있는 읽기 전용 쓰레드 생성
// 현재 접속자 명단 가지고 있기(유지하기)
// 받은 메시지를 접속자 전체에게 전송하는 기능
public class TCPServerMultiChat {

	// 서버소켓 생성하고 대기하다가
	// 클라이언트 접속하면 메시지 읽기전용 쓰레드 생성
	public void start() {
		ServerSocket serverSocket = null;

		try {
			serverSocket = new ServerSocket(10000);
			System.out.println(">> 서버가 시작되었습니다....");
			System.out.println(
					"IP번호:포트번호 - " + InetAddress.getLocalHost().getHostAddress() + ":" + serverSocket.getLocalPort());

			Socket socket = serverSocket.accept(); // 접속 대기
			System.out.println("[" + socket.getInetAddress() + ":" + socket.getPort() + "] 접속~~");

			// 접속자가 보낸 메시지를 읽을 수 있는 읽기 전용 쓰레드 생성
			ServerReceiver thread = new ServerReceiver(socket);
			thread.start();
		} catch (IOException e) {
			e.printStackTrace();
		}
	}

	// ServerReceiver : 접속자가 보낸 메시지 수신 후 접속자 전체에게 전달
	// 생성될때 : 첫메시지(별칭,이름) 사용 + 접속자 명단에 추가 + 입장알림
	// 메시지수신 : 접속자가 보낸 메시지 수신 후 접속자 전체에게 전달
	// 종료할때 : 접속자 명단에서 삭제 + 퇴장알림
	private class ServerReceiver extends Thread {
		Socket socket;

		public ServerReceiver(Socket socket) {
			this.socket = socket;
		}

	}

}
