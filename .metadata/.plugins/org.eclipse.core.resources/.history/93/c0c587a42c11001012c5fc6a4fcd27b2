import java.io.*;
import java.net.*;
import java.text.SimpleDateFormat;
import java.util.*;

public class ChatServer {
    private static final int PORT = 12345;
    private static HashMap<String, PrintWriter> clients = new HashMap<>();
    private static List<String> chatHistory = new ArrayList<>();
    private static SimpleDateFormat sdf = new SimpleDateFormat("HH:mm");

    public static void main(String[] args) {
        try (ServerSocket serverSocket = new ServerSocket(PORT)) {
            InetAddress ip = InetAddress.getLocalHost();
            System.out.println("서버 IP: " + ip.getHostAddress());
            System.out.println("서버가 포트 " + PORT + "에서 시작되었습니다.");

            Runtime.getRuntime().addShutdownHook(new Thread(() -> saveChatHistory()));

            while (true) {
                new Handler(serverSocket.accept()).start();
            }
        } catch (IOException e) {
            System.out.println("서버 시작 중 오류: " + e.getMessage());
        }
    }

    private static void broadcast(String message) {
        synchronized (clients) {
            for (PrintWriter writer : clients.values()) {
                writer.println("TEXT:" + message);
            }
        }
    }

    private static void broadcastFile(String sender, String fileName, byte[] fileData) {
        synchronized (clients) {
            for (Map.Entry<String, PrintWriter> entry : clients.entrySet()) {
                String clientUsername = entry.getKey();
                PrintWriter writer = entry.getValue();

                // 파일을 보내는 클라이언트에게만 실제 파일 데이터를 전송
                try {
                    Socket clientSocket = null;
                    // 클라이언트의 소켓을 찾는 로직 필요
                    // clients 맵에 소켓을 저장하거나, Handler에서 소켓을 가져오는 방법 등을 사용해야 함
                    // 여기서는 편의상 null로 두고, 실제 구현에서는 클라이언트의 소켓을 찾아야 함

                    // **중요**: clients 맵에 PrintWriter 뿐만 아니라 Socket 객체도 함께 저장해야 함
                    // 예: private static HashMap<String, Pair<PrintWriter, Socket>> clients = new HashMap<>();

                    if (clientSocket != null) {
                         OutputStream out = clientSocket.getOutputStream();
                         out.write(fileData);
                         out.flush();
                    } else {
                        System.out.println("클라이언트 " + clientUsername + "의 소켓을 찾을 수 없습니다.");
                    }

                } catch (IOException e) {
                    System.out.println("파일 전송 중 오류: " + e.getMessage());
                }
            }
        }
    }

    private static void saveChatHistory() {
        try (PrintWriter writer = new PrintWriter("chat_history.txt")) {
            for (String message : chatHistory) {
                writer.println(message);
            }
            System.out.println("채팅 기록이 저장되었습니다.");
        } catch (FileNotFoundException e) {
            System.out.println("채팅 기록 저장 중 오류: " + e.getMessage());
        }
    }

    private static class Handler extends Thread {
        private Socket socket;
        private PrintWriter out;
        private BufferedReader in;
        private String username;

        public Handler(Socket socket) {
            this.socket = socket;
        }

        public void run() {
            try {
                in = new BufferedReader(new InputStreamReader(socket.getInputStream()));
                out = new PrintWriter(socket.getOutputStream(), true);

                out.println("이름을 입력해주세요:");
                username = in.readLine();
                if (username == null || username.trim().isEmpty()) {
                    username = "익명" + new Random().nextInt(1000);
                }

                synchronized (clients) {
                    clients.put(username, out);
                    out.println("TEXT:현재 접속자: " + String.join(", ", clients.keySet()));
                    String joinMessage = "[알림] " + username + "님이 접속하였습니다.";
                    chatHistory.add(joinMessage);
                    broadcast(joinMessage);
                }

                String message;
                while ((message = in.readLine()) != null) {
                    if (message.startsWith("FILE:")) {
                        String[] parts = message.split(":", 2);
                        String fileName = parts[1];
                        int fileSize = Integer.parseInt(in.readLine());
                        byte[] fileData = new byte[fileSize];
                        InputStream is = socket.getInputStream();
                        int bytesRead = 0;
                        while (bytesRead < fileSize) {
                            bytesRead += is.read(fileData, bytesRead, fileSize - bytesRead);
                        }
                        String fileMessage = "[" + sdf.format(new Date()) + "] " + username + "님이 파일을 보냈습니다: " + fileName;
                        chatHistory.add(fileMessage);
                        broadcast(fileMessage);
                        broadcastFile(username, fileName, fileData);
                    } else {
                        String formattedMessage = "[" + sdf.format(new Date()) + "] " + username + " : " + message;
                        System.out.println("수신: " + formattedMessage);
                        chatHistory.add(formattedMessage);
                        broadcast(formattedMessage);
                    }
                }
            } catch (IOException e) {
                System.out.println("클라이언트 처리 중 오류: " + e.getMessage());
            } finally {
                if (username != null) {
                    synchronized (clients) {
                        clients.remove(username);
                        String leaveMessage = "[알림] " + username + "님이 퇴장하였습니다.";
                        chatHistory.add(leaveMessage);
                        broadcast(leaveMessage);
                    }
                }
                try {
                    socket.close();
                } catch (IOException e) {
                    System.out.println("소켓 닫기 오류: " + e.getMessage());
                }
            }
        }
    }
}
